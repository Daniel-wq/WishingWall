<?php
class Member extends Base {
    //1、定义一个私有属性$data
    //2、之后的构造方法通过调用此属性，来载入数据库文件
    private $data;
    //1、构造方法
    //2、定义构造方法之后，只要一实例化就会执行此方法，一般将需要在运行程序时就执行的代码段都写在此构造方法中，这里将载入数据库的代码段写入构造方法中，之后如需用到就直接使用就可以
    public function __construct(){
        //1、载入数据库
        //2、登录、注册时需要用到数据库，需要将用户信息写入数据库中，登录时还需要用到数据库中的数据进行比对
        $this->data = include './data/userData.php';
    }


    //登录方法
    public function login(){
        //1、将构造函数中调用数据库得到的数据存入变量中
        //2、这里存好之后，在此方法中，只需要使用$data就可以使用数据库中的值，不需要每次都使用$this->data，而且很有可能会忘记写$this
        $data = $this->data;
        //1、判断是否为POST方式提交
        //2、因为注册、将数据写入数据库中都是用户点击了提交按钮（POST方式）之后才进行的，如果没有点击注册按钮就不需要运行这些代码段
        if(IS_POST) {
            //1、获得用户输入的内容
            //2、需要用用户输入的内容和数据库中用户名和密码进行比对
            $user = $_POST['username'];
            $pwd = $_POST['password'];

            foreach ($data as $k=>$v) {
                if ($user ==$v['username']&&password_verify($_POST['password'],$v['password'])){
                    //1、将userName存入session中
                    //2、首页面需要用到session来检测是否登录，同时我们在其他页面需要显示用户名，将用户名存入session，其他页面就能通过session获得当前用户名
                    $_SESSION['user'] = [
                        'username' => $_POST['username'],
                    ];

                    //1、检测是否点击了记住我
                    //2、如果点击了记住我，我们需要将cookie时间周期设置为7天
                    if(isset($_POST['remember'])){
                        //这里的session_name()是session的name值，session_id()所指向的文件中存储之前的user信息
                        setcookie(session_name(),session_id(),time() + 3600*24*7,'/');
                    }

                    //1、提示信息
                    //2、通过go函数实现弹窗，提示用户登陆成功，跳转到显示页面
                    go('登录成功！','?c=home&a=index');
                }
            }
        }
        //1、载入登录模板
        //2、需要先载入模板，才能显示页面才能登陆
        $this->view($data);
    }


    //注册方法
    public function reg(){
        //1、将构造函数中调用数据库得到的数据存入变量中
        //2、这里存好之后，在此方法中，只需要使用$data就可以使用数据库中的值，不需要每次都使用$this->data，而且很有可能会忘记写$this
        $data = $this->data;

        //1、判断是否为POST方式提交
        //2、因为注册、将数据写入数据库中都是用户点击了提交按钮（POST方式）之后才进行的，如果没有点击注册按钮就不需要运行这些代码段
        if(IS_POST) {
            //1、将密码加密
            //2、用户信息安全，将密码加密之后很难被机器识别和破解，这样就保护用户的信息
            $_POST['password'] = password_hash($_POST['password'], PASSWORD_DEFAULT);
            $_POST['repassword'] = password_hash($_POST['repassword'], PASSWORD_DEFAULT);

            //1、向数据库中追加数据
            //2、我们这里不能利用赋值来写入数据，这样会覆盖原来的数据，需要通过追加的方法来写入数据
            $data[] = $_POST;
            //p($data);

            //1、利用我们自定义的dataToFile函数将数据写入数据库中
            //2、注册成功之后，需要将用户信息通过数据库保存，之后需要用到数据来进行校验和显示
            dataToFile('./data/userData.php',$data);
            //1、通过自定义的go函数提示用户并跳转
            //2、提示用户注册成，有一个反馈信息，然后直接跳转到登录页面，不需要用户手动跳转，这样更友好
            go('注册成功，赶快去登陆！','?s=member/login');
        }
        //1、通过继承base类载入注册模板
        //2、用户注册需要用到注册页面。所以需要先载入注册页面模板
        $this->view($data);
    }
    //验证码
    public function code(){
        //1、调用函数文件中的useTool函数，载入验证码
        //2、页面中需要用到验证码，需要先载入验证码工具类
        useTool('Code1');
        //1、实例化
        //2、这里需要通过实例化才能执行验证码类中的方法，
        $code = new Code1();
        //1、调用类里面的showCode方法
        //2、实例化之后还需要调用方法，才能完成验证码工具的调用，如果不调用，只是实例化，那么里面的方法是不会执行的
        $code->showCode();
    }

    //退出登录
    public function quit(){
        //1、释放当前内存中已创建的所有session
        //2、节约内存，需要结合destroy才能完成session的删除，从而完成登出操作
        session_unset();
        //1、清除session文件和session.id
        //2、此操作还会保留内存中的session，需要结合上面的unset来完成session的清除
        session_destroy();
        //1、提示信息，跳转登录页面
        //2、提示用户退出成功，用户提要友好，退出登录之后跳转值登录页面
        go('退出成功！','?s=member/login');
    }
    //注册页面检测用户名
    public function checkUserName(){
            //1、接收用户输入的用户名
            //2、我们需要用到这个值来和数据库中用户名进行比对
            $u = $_POST['u'];
            //echo $user;

            //1、循环数据库与用户输入的值进行比对
            //2、判断用户名是否已经存在
            foreach ($this->data as $k => $v) {
                if ($u == $v['userName']) {
                    //1、如果数据库中已经存在用户刚才输入的用户名，那么就返回一个标识，这里输出0
                    //2、这里输出的值，能够在ajax部分被接收到，就可利用这个值拉进行后续操作了
                    echo 0;
                    //1、阻止后面代码运行
                    //2、如果用户名已存在，那么就不需要再往下面运行了，所以通过exit阻止之后的代码运行
                    exit;
                }
            }
            //1、如果数据库中不存在用户刚才输入的用户名，那么就返回1
            //2、这里输出的值，能够在ajax部分被接收到，就可利用这个值拉进行后续操作了
            echo 1;
    }
    //验证码检测
    public function checkCode(){
        //1、获得用户输入的验证码
        //2、我们需要用到用户输入的验证码来和session中的验证码进行比较
        $code = $_POST['c'];
        //1、获得存在session中的验证码
        //2、我们需要用session中的验证码来和到用户输入的验证码进行比较
        $s_code = $_SESSION['Code1'];
        //1、进行验证码比对
        //2、只有验证码一致才能注册，如果不进项比对，怎么输入都可以注册，这样就没有什么意义了，设置验证码是为了防止机器大批量注册，向数据库中写入无意义的数据
        if ($code==$s_code){
            //1、如果两个地方的验证码相等，那么返回一个标识，这里输出1
            //2、这里输出的结果我们可以在ajax中接收到，这样我们就可以通过接收到的值进行后续的操作了
            echo 1;
            //1、阻止后面代码运行
            //2、如果验证码没有填写正确，那么就不需要再往下面运行了，所以通过exit阻止之后的代码运行
            exit;
        }else{
            //1、如果不相等输出0
            //2、同样我们在ajax部分就可以通过这个值来进行后续的操作了
            echo 0;
        }
    }

    //登录页面用户名检测
    public function checkLoginUser(){
        //1、接收用户输入的用户名
        //2、我们需要用到这个值来和数据库中用户名进行比对
        $u = $_POST['u'];
        $p = $_POST['p'];

        //1、循环数据库与用户输入的值进行比对
        //2、判断用户名是否输入正确
        foreach ($this->data as $k => $v) {
            if ($u==$v['userName'] && password_verify($p,$v['pwd'])) {
                //1、如果用户输入的用户名与数据库中的某个用户名相同，并且密码一致，那么就返回一个标识，这里输出1
                //2、这里输出的值，能够在ajax部分被接收到，就可利用这个值拉进行后续操作了
                echo 1;
                //1、阻止下面的代码执行
                //2、当用户名和密码都相同，那么就不需要再做之后的判断了，可以组织代码运行
                exit;
            }else if($u==$v['userName'] && $p!=$v['pwd']){
                //1、如果用户输入的用户名与数据库中的某个用户名相同，但密码不一致，那么就返回一个标识，这里输出1
                //2、这里输出的值，能够在ajax部分被接收到，就可利用这个值拉进行后续操作了
                echo 2;
                //1、阻止下面的代码执行
                //2、此时已经返回一个标识，那么就不需要再做之后的判断了，可以组织代码运行
                exit;
            }
        }
        //1、如果数据库中不存在用户刚才输入的用户名，那么就返回1
        //2、这里输出的值，能够在ajax部分被接收到，就可利用这个值拉进行后续操作了
        echo 0;
    }
}


